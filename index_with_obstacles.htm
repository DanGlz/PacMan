
<!DOCTYPE html>
<html>

<head></head>
<style>

  /* Style the tab */
  div.tab {
    align-content: center;
    vertical-align: center ;
    overflow: hidden;
    border: 0px solid transparent;
    background-color: #f1f1f1;
  }

  /* Style the buttons inside the tab */
  div.tab button {
    background: url(62.jpg) no-repeat;
    color: white ;
    font-family: "Comic Sans MS", cursive, sans-serif ;
    border: black;
    outline: transparent;
    cursor: pointer;
    padding: 14px 16px;
    transition: 0.3s;
    font-size: 17px;
    width: 200px;
    height: 50px;
  }

  /* Change background color of buttons on hover */
  div.tab button:hover {
    background-color: #ddd;
  }

  /* Create an active/current tablink class */
  div.tab button.active {
    background-color: yellow;
  }

  /* Style the tab content */
  .tabcontent {
    display: none;
    padding: 130px 100px;
    border: 0px solid transparent;
    border-top: none;
  }
</style>

<aside>
    <nav class="navbar navbar-inverse sidebar navbar-fixed-top" role="navigation">
        <link rel="stylesheet" type="text/css"  href="mystyle.css" />

        <div class="nav-side-menu">
            <div class="brand"></div>
            <i class="fa fa-bars fa-2x toggle-btn" data-toggle="collapse" data-target="#menu-content"></i>

            <div class="menu-list">

                <ul id="menu-content" class="menu-content collapse out">

                    <div class="tab">
                        <button class="tablinks" onclick="openTab(event, 'Welcome')" >Welcome</button>

                        <button class="tablinks" onclick="openTab(event, 'Register')">Register</button>

                        <button class="tablinks" onclick="openTab(event, 'Login')">Login</button>

                        <button class="tablinks" onclick="openTab(event, 'About')">About</button>

                        <button class="tablinks" onclick="openTab(event, 'PacMan')">PacMan</button>

                    </div>
                </ul>
            </div>
        </div>
    </nav>
</aside>

<div id="Welcome" class="tabcontent" align="center" >
    <h3>Welcome</h3>
    <p>Welcome</p>
</div>

<div id="Register" class="tabcontent" align="center">
    <h3>Register</h3>
    <p>Register</p>
</div>

<div id="Login" class="tabcontent" align="center">
    <h3>Login</h3>
    <p>Login</p>
</div>

<div id="About" class="tabcontent" align="center">
    <h3>About</h3>
    <p>About</p>
</div>

<div id="PacMan" class="tabcontent" align="center"><body>SCORE:
<input id="lblScore" type="text" />
<br/>
TIME:
<input id="lblTime" type="text" />
<br/>
<canvas id="canvas" height="600" width="600"></canvas>
</body>
</div>

<script type="text/javascript">
            var context = canvas.getContext("2d");
            var shape=new Object();
            var board;
            var score;
            var pac_color;
            var start_time;
            var time_elapsed;
            var interval;

		Start();

            function Start() {
                board = new Array();
                score = 0;
                pac_color="yellow";
                var cnt = 100;
                var food_remain = 50;
                var pacman_remain = 1;
                start_time= new Date();
                for (var i = 0; i < 10; i++) {
                    board[i] = new Array();
                    //put obstacles in (i=3,j=3) and (i=3,j=4) and (i=3,j=5), (i=6,j=1) and (i=6,j=2)
                    for (var j = 0; j < 10; j++) {
                    	if((i==3 && j==3)||(i==3 && j==4)||(i==3 && j==5)||(i==6 && j==1)||(i==6 && j==2))
                    	{
                    		board[i][j] = 4;
                    	}
                    	else{
                    	var randomNum = Math.random();
                        if (randomNum <= 1.0 * food_remain / cnt) {
                            food_remain--;
                            board[i][j] = 1;
                        } else if (randomNum < 1.0 * (pacman_remain + food_remain) / cnt) {
                        	shape.i=i;
                        	shape.j=j;
                            pacman_remain--;
                            board[i][j] = 2;
                        } else {
                            board[i][j] = 0;
                        }
                        cnt--;
                    	}
                    	}
                }
                while(food_remain>0){
					var emptyCell = findRandomEmptyCell(board);
					board[emptyCell[0]][emptyCell[1]] = 1;
					food_remain--;
                }
                keysDown = {};
                addEventListener("keydown", function (e) {
                    keysDown[e.keyCode] = true;
                }, false);
                addEventListener("keyup", function (e) {
                    keysDown[e.keyCode] = false;
                }, false);
                interval=setInterval(UpdatePosition, 250);
            }


             function findRandomEmptyCell(board){
             	var i = Math.floor((Math.random() * 9) + 1);
             	var j = Math.floor((Math.random() * 9) + 1);
    			while(board[i][j]!=0)
    			{
             		i = Math.floor((Math.random() * 9) + 1);
             		j = Math.floor((Math.random() * 9) + 1);
    			}
                return [i,j];
             }

            function GetKeyPressed() {
                if (keysDown[38]) {
                    return 1;
                }
                if (keysDown[40]) {
                    return 2;
                }
                if (keysDown[37]) {
                    return 3;
                }
                if (keysDown[39]) {
                    return 4;
                }
            }

            function Draw() {
            	canvas.width=canvas.width; //clean board
                lblScore.value = score;
                lblTime.value = time_elapsed;
                for (var i = 0; i < 10; i++) {
                    for (var j = 0; j < 10; j++) {
                        var center = new Object();
                        center.x = i * 60 + 30;
                        center.y = j * 60 + 30;
                        if (board[i][j] == 2) {
                            context.beginPath();
                            context.arc(center.x, center.y, 30, 0.15 * Math.PI, 1.85 * Math.PI); // half circle
                            context.lineTo(center.x, center.y);
                            context.fillStyle = pac_color; //color
                            context.fill();
                            context.beginPath();
                            context.arc(center.x + 5, center.y - 15, 5, 0, 2 * Math.PI); // circle
                            context.fillStyle = "black"; //color
                            context.fill();
                        } else if (board[i][j] == 1) {
                            context.beginPath();
                            context.arc(center.x, center.y, 15, 0, 2 * Math.PI); // circle
                            context.fillStyle = "black"; //color
                            context.fill();
                        }
                        else if (board[i][j] == 4) {
                            context.beginPath();
                            context.rect(center.x-30, center.y-30, 60, 60);
                            context.fillStyle = "grey"; //color
                            context.fill();
                        }
                    }
                }


            }

            function UpdatePosition() {
            	board[shape.i][shape.j]=0;
                var x = GetKeyPressed()
                if(x==1)
                {
                	if(shape.j>0 && board[shape.i][shape.j-1]!=4)
                	{
                		shape.j--;
                	}
                }
                if(x==2)
                {
                	if(shape.j<9 && board[shape.i][shape.j+1]!=4)
                	{
                		shape.j++;
                	}
                }
                if(x==3)
                {
                	if(shape.i>0 && board[shape.i-1][shape.j]!=4)
                	{
                		shape.i--;
                	}
                }
                if(x==4)
                {
                	if(shape.i<9 && board[shape.i+1][shape.j]!=4)
                	{
                		shape.i++;
                	}
                }
                if(board[shape.i][shape.j]==1)
                {
                	score++;
                }
                board[shape.i][shape.j]=2;
                var currentTime=new Date();
                time_elapsed=(currentTime-start_time)/1000;
            	if(score>=20&&time_elapsed<=10)
            	{
            		pac_color="green";
            	}
            	if(score==50)
            	{
            		window.clearInterval(interval);
            		window.alert("Game completed");
            	}
            	else
            	{
            		Draw();
            	}
            }
             function openTab(evt, cityName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(cityName).style.display = "block";
    evt.currentTarget.className += " active";
  }
        </script>
</body>

</html>